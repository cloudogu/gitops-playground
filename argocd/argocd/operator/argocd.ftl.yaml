apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: argocd
  namespace: "${namePrefix}argocd"
spec:
  applicationSet:
    enabled: true
    resources:
      limits:
        cpu: '2'
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
    <#if argocd.env?has_content>
    env:
    <#list argocd.env as envVar>
      - name: ${envVar.name}
        value: ${envVar.value}
    </#list>
    </#if>
  notifications:
    enabled: true
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    <#if argocd.env?has_content>
    env:
    <#list argocd.env as envVar>
      - name: ${envVar.name}
        value: ${envVar.value}
    </#list>
    </#if>
  controller:
    resources:
      limits:
        cpu: "2000m"
        memory: "2048Mi"
      requests:
        cpu: "250m"
        memory: "1024Mi"
    <#if argocd.env?has_content>
    env:
    <#list argocd.env as envVar>
      - name: ${envVar.name}
        value: ${envVar.value}
    </#list>
    </#if>
  ha:
    enabled: false
    resources:
      limits:
        cpu: "500m"
        memory: "256Mi"
      requests:
        cpu: "250m"
        memory: "128Mi"
  <#if isOpenshift>
  sso:
    dex:
      openShiftOAuth: true
      resources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
    provider: dex
  rbac:
    defaultPolicy: ''
    policy: |
      g, system:cluster-admins, role:admin
      g, platform-admin, role:admin
    scopes: '[groups]'
  </#if>
  redis:
    resources:
      limits:
        cpu: "500m"
        memory: "256Mi"
      requests:
        cpu: "250m"
        memory: "128Mi"
  repo:
    resources:
      limits:
        cpu: "1000m"
        memory: "1024Mi"
      requests:
        cpu: "250m"
        memory: "256Mi"
    <#if argocd.env?has_content>
    env:
    <#list argocd.env as envVar>
      - name: ${envVar.name}
        value: ${envVar.value}
    </#list>
    </#if>
  server:
    insecure: ${isInsecure?c}
    resources:
      limits:
        cpu: "500m"
        memory: "256Mi"
      requests:
        cpu: "125m"
        memory: "128Mi"
    <#if argocd.env?has_content>
    env:
    <#list argocd.env as envVar>
      - name: ${envVar.name}
        value: ${envVar.value}
    </#list>
    </#if>
    route:
      enabled: ${isOpenshift?c}
    host: "${argocd.host}"
    # Enable ingress only if we are not on OpenShift and insecure mode is NOT enabled.
    # Note: When insecure mode is enabled, forced HTTP redirect to HTTPS cannot be disabled here(likely due to a bug),
    # so we cannot use this ingress for insecure mode. For insecure mode we use a separate file (ingress.ftl.yaml).
    ingress:
      enabled: ${((!isOpenshift) && (!isInsecure))?c}
  initialRepositories: |
<#if !(scmm.centralScmmUrl?has_content)>
    - name: argocd
      url: ${scmm.repoUrl}argocd/argocd<#if scmm.provider == "gitlab">.git</#if>
    - name: cluster-resources
      url: ${scmm.repoUrl}argocd/cluster-resources<#if scmm.provider == "gitlab">.git</#if>
    - name: prometheus-community
      type: helm
      url: https://prometheus-community.github.io/helm-charts
    - name: codecentric
      type: helm
      url: https://codecentric.github.io/helm-charts
    - name: ingress-nginx
      type: helm
      url: https://kubernetes.github.io/ingress-nginx
</#if>
    - name: example-apps
      url: ${scmm.repoUrl}argocd/example-apps<#if scmm.provider == "gitlab">.git</#if>
    - name: nginx-helm-jenkins
      url: ${scmm.repoUrl}argocd/nginx-helm-jenkins<#if scmm.provider == "gitlab">.git</#if>
    - name: nginx-helm-umbrella
      url: ${scmm.repoUrl}argocd/nginx-helm-umbrella<#if scmm.provider == "gitlab">.git</#if>
    - name: bitnami
      type: helm
      url: https://raw.githubusercontent.com/bitnami/charts/archive-full-index/bitnami
  resourceInclusions: |
    - apiGroups:
      - "batch"
      kinds:
      - "Job"
      clusters:
      - "https://kubernetes.default.svc"
      - "${argocd.resourceInclusionsCluster}"
    - apiGroups:
      - ""
      kinds:
      - "Secret"
      - "ConfigMap"
      - "PersistentVolumeClaim"
      - "Service"
      - "ServiceAccount"
      - "Pod"
      - "Event"
      clusters:
      - "https://kubernetes.default.svc"
      - "${argocd.resourceInclusionsCluster}"
    - apiGroups:
      - "apps"
      kinds:
      - "Deployment"
      - "ReplicaSet"
      - "StatefulSet"
      - "DaemonSet"
      clusters:
      - "https://kubernetes.default.svc"
      - "${argocd.resourceInclusionsCluster}"
    - apiGroups:
      - "extensions"
      kinds:
      - "Ingress"
      clusters:
      - "https://kubernetes.default.svc"
      - "${argocd.resourceInclusionsCluster}"
    - apiGroups:
      - "networking.k8s.io"
      kinds:
      - "Ingress"
      - "NetworkPolicy"
      clusters:
      - "https://kubernetes.default.svc"
      - "${argocd.resourceInclusionsCluster}"
    - apiGroups:
      - "argoproj.io"
      kinds:
      - "Application"
      - "AppProject"
      - "ApplicationSet"
      clusters:
      - "https://kubernetes.default.svc"
      - "${argocd.resourceInclusionsCluster}"
    <#if isOpenshift>
    - apiGroups:
      - "route.openshift.io"
      kinds:
      - "Route"
      clusters:
      - "https://kubernetes.default.svc"
      - "${argocd.resourceInclusionsCluster}"
    </#if>
    - apiGroups:
      - "rbac.authorization.k8s.io"
      kinds:
      - "Role"
      - "RoleBinding"
      clusters:
      - "https://kubernetes.default.svc"
      - "${argocd.resourceInclusionsCluster}"
    - apiGroups:
      - "external-secrets.io"
      kinds:
      - "SecretStore"
      - "ExternalSecret"
      clusters:
      - "https://kubernetes.default.svc"
      - "${argocd.resourceInclusionsCluster}"
    - apiGroups:
      - "argoproj.io"
      kinds:
      - "ArgoCD"
      clusters:
      - "https://kubernetes.default.svc"
      - "${argocd.resourceInclusionsCluster}"
    - apiGroups:
      - "monitoring.coreos.com"
      kinds:
      - "Alertmanager"
      - "AlertmanagerConfig"
      - "Prometheus"
      - "PrometheusRule"
      - "ServiceMonitor"
      - "PodMonitor"
      - "Probe"
      clusters:
      - "https://kubernetes.default.svc"
      - "${argocd.resourceInclusionsCluster}"